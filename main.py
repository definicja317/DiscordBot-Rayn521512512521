import discord
from discord import app_commands, ui
import os
import sys
import threading
from flask import Flask
from dotenv import load_dotenv
from datetime import datetime, timedelta
import re 
import asyncio
from typing import Literal

# --- Flask ---
app = Flask(__name__)

@app.route("/")
def home():
    return "Bot dzia≈Ça!"

# --- Token ---
load_dotenv()
token = os.getenv("DISCORD_BOT_TOKEN") 
if not token:
    print("B≈ÇƒÖd: brak tokena Discord. Ustaw DISCORD_BOT_TOKEN w Render lub w .env")
    sys.exit(1)

# --- Ustawienia ---
# WA≈ªNE: Wprowad≈∫ swoje faktyczne ID r√≥l/u≈ºytkownik√≥w.
PICK_ROLE_ID = 1413424476770664499 # ID Roli, kt√≥ra mo≈ºe 'pickowaƒá' graczy
STATUS_ADMINS = [1184620388425138183, 1409225386998501480, 1007732573063098378, 364869132526551050] # ID U≈ºytkownik√≥w-Admin√≥w
ADMIN_ROLES = STATUS_ADMINS 
ZANCUDO_IMAGE_URL = "https://cdn.discordapp.com/attachments/1224129510535069766/1414194392214011974/image.png"
CAYO_IMAGE_URL = "https://cdn.discordapp.com/attachments/1224129510535069766/1414204332747915274/image.png"
LOGO_URL = "https://cdn.discordapp.com/attachments/1184622314302754857/1420796249484824757/RInmPqb.webp?ex=68d6b31e&is=68d5619e&hm=0cdf3f7cbb269b12c9f47d7eb034e40a8d830ff502ca9ceacb3d7902d3819413&"

# --- Discord Client ---
intents = discord.Intents.default()
intents.members = True
client = discord.Client(intents=intents)
tree = app_commands.CommandTree(client)

# --- Pamiƒôƒá zapis√≥w ---
# WA≈ªNE: W przypadku restartu bota te dane zostanƒÖ wyczyszczone!
captures = {}   
airdrops = {}   
events = {"zancudo": {}, "cayo": {}} 
squads = {}     

# =====================
# <<< UTILITY FUNCTIONS >>>
# =====================

def parse_mention_id(text: str, type: Literal["role", "channel"]) -> int | None:
    """Ekstrahuje ID z wzmianki (np. @rola, #kana≈Ç)."""
    if type == "role":
        match = re.search(r'<@&(\d+)>', text)
    elif type == "channel":
        match = re.search(r'<#(\d+)>', text)
    return int(match.group(1)) if match else None

def parse_timer_minutes(text: str) -> int:
    """Ekstrahuje minuty z tekstu (np. '20 min')."""
    match = re.search(r'(\d+)\s*(min|minut)', text, re.I)
    return int(match.group(1)) if match else 0

# =====================
# <<< DYNAMICZNY TIMER (Core Fix) >>>
# =====================

async def update_timer_embed(message_id: int, event_type: str, guild: discord.Guild, data: dict, view_class):
    """Asynchronicznie aktualizuje wiadomo≈õƒá z timerem."""
    
    end_time: datetime = data["timer_end_time"]
    channel: discord.TextChannel = data["message"].channel
    initial_message: discord.Message = data["message"]
    role_mention = f"<@&{data['role_id']}>" if data.get("role_id") else "@everyone"
    
    while datetime.now() < end_time:
        remaining_seconds = (end_time - datetime.now()).total_seconds()
        
        # Obliczanie pozosta≈Çego czasu w minutach
        minutes_remaining = int(remaining_seconds // 60)
        
        # Czas, po jakim nastƒÖpi kolejna aktualizacja (co 60 sekund lub mniej)
        sleep_time = max(1, min(remaining_seconds % 60 + 1, 60))
        
        try:
            # Tworzenie odpowiedniego widoku i embeda z aktualnym czasem
            if event_type == "captures":
                view = view_class(message_id, data.get("author_name", "Admin"))
            elif event_type == "airdrop":
                view = view_class(message_id, data["description"], data["voice_channel_id"], data.get("author_name", "Admin"))
            elif event_type in ["zancudo", "cayo"]:
                 view = view_class(message_id, event_type, data.get("author_name", "Admin"))
            else:
                break 

            embed = view.make_embed(guild, minutes_remaining)
            await initial_message.edit(embed=embed, view=view)
            
            if remaining_seconds < 1:
                break
                
            await asyncio.sleep(sleep_time)

        except discord.NotFound:
            print(f"Wiadomo≈õƒá {message_id} usuniƒôta, anulowanie timera.")
            break
        except Exception as e:
            # W przypadku b≈Çƒôdu (np. edycja zbyt szybko/za rzadko), odczekaj i spr√≥buj ponownie
            print(f"B≈ÇƒÖd podczas aktualizacji timera {message_id}: {e}")
            await asyncio.sleep(10) 
            
    # Ostateczna aktualizacja i ping po zako≈Ñczeniu timera
    if initial_message and data.get("is_active"):
        try:
            # Ostateczny Embed (0 minut)
            if event_type == "captures":
                view = view_class(message_id, data.get("author_name", "Admin"))
            elif event_type == "airdrop":
                view = view_class(message_id, data["description"], data["voice_channel_id"], data.get("author_name", "Admin"))
            elif event_type in ["zancudo", "cayo"]:
                 view = view_class(message_id, event_type, data.get("author_name", "Admin"))
            
            final_embed = view.make_embed(guild, 0)
            await initial_message.edit(embed=final_embed)
            
            # Wys≈Çanie pingu/ostatecznego og≈Çoszenia
            await channel.send(f"{role_mention} **CZAS UP≈ÅYNƒÑ≈Å!** Zbi√≥rka! (Og≈Çoszenie po timerze dla {event_type.upper()})", delete_after=300)

            # Oznacz jako nieaktywne
            data["is_active"] = False

        except Exception as e:
            print(f"B≈ÇƒÖd podczas finalnej aktualizacji timera: {e}")

# =====================
# <<< VIEWS Z DYNAMICZNYM TIMEREM >>>
# =====================

class CapturesView(ui.View):
    def __init__(self, capture_id: int, author_name: str): 
        super().__init__(timeout=None)
        self.capture_id = capture_id
        self.author_name = author_name

    def make_embed(self, guild: discord.Guild, timer_minutes: int | None = None):
        participants_ids = captures.get(self.capture_id, {}).get("participants", [])
        data = captures.get(self.capture_id, {})
        
        # POPRAWKA 1: Opis
        description_text = "**Kliknij przycisk, aby siƒô zapisaƒá!**"
        
        embed = discord.Embed(title="CAPTURES!", description=description_text, color=discord.Color(0xFFFFFF))
        embed.set_thumbnail(url=LOGO_URL) 
        
        if data.get("image_url"):
            embed.set_image(url=data["image_url"])
        
        if participants_ids:
            lines = []
            for uid in participants_ids:
                member = guild.get_member(uid)
                lines.append(f"- {member.mention}" if member else f"- <@{uid}>")
            embed.add_field(name=f"Zapisani ({len(participants_ids)}):", value="\n".join(lines), inline=False)
        else:
            embed.add_field(name="Zapisani:", value="Brak uczestnik√≥w", inline=False)
            
        footer_text = f"Wystawione przez {self.author_name}"
        # POPRAWKA 2: Dynamiczny Timer w Stopce
        if timer_minutes is not None:
            if timer_minutes > 0:
                footer_text += f" | ‚è∞ Pozosta≈Ço: {timer_minutes} minut"
            else:
                 footer_text += f" | ‚ö†Ô∏è ZBI√ìRKA! CZAS UP≈ÅYNƒÑ≈Å!"
                 
        embed.set_footer(text=footer_text)
        return embed

    @ui.button(label="‚úÖ Wpisz siƒô", style=discord.ButtonStyle.green)
    async def join_button(self, interaction: discord.Interaction, button: ui.Button):
        user_id = interaction.user.id
        participants = captures.get(self.capture_id, {}).get("participants", [])
        
        if user_id not in participants:
            await interaction.response.defer() 
            captures.setdefault(self.capture_id, {"participants": []})["participants"].append(user_id)
            # U≈ºywamy make_embed z czasem pozosta≈Çym (je≈õli timer jest aktywny)
            data = captures.get(self.capture_id, {})
            time_left = int((data.get("timer_end_time", datetime.now()) - datetime.now()).total_seconds() // 60)
            await interaction.message.edit(embed=self.make_embed(interaction.guild, time_left), view=self)
            await interaction.followup.send("Zosta≈Çe≈õ(a≈õ) zapisany(a)!", ephemeral=True)
        else:
            await interaction.response.send_message("Ju≈º jeste≈õ zapisany(a).", ephemeral=True)

    @ui.button(label="‚ùå Wypisz siƒô", style=discord.ButtonStyle.red)
    async def leave_button(self, interaction: discord.Interaction, button: ui.Button):
        user_id = interaction.user.id
        participants = captures.get(self.capture_id, {}).get("participants", [])
        
        if user_id in participants:
            await interaction.response.defer() 
            captures[self.capture_id]["participants"].remove(user_id)
            # U≈ºywamy make_embed z czasem pozosta≈Çym (je≈õli timer jest aktywny)
            data = captures.get(self.capture_id, {})
            time_left = int((data.get("timer_end_time", datetime.now()) - datetime.now()).total_seconds() // 60)
            await interaction.message.edit(embed=self.make_embed(interaction.guild, time_left), view=self)
            await interaction.followup.send("Zosta≈Çe≈õ(a≈õ) wypisany(a).", ephemeral=True)
        else:
            await interaction.response.send_message("Nie jeste≈õ zapisany(a).", ephemeral=True)
            
    # Przycisk Pickuj... (bez zmian)
    @ui.button(label="üéØ Pickuj osoby", style=discord.ButtonStyle.blurple)
    async def pick_button(self, interaction: discord.Interaction, button: ui.Button):
        await interaction.response.send_message("Logika pickowania bez zmian (wymaga implementacji SelectMenu).", ephemeral=True)


class AirdropView(ui.View):
    def __init__(self, message_id: int, description: str, voice_channel_id: int, author_name: str):
        super().__init__(timeout=None)
        self.message_id = message_id
        self.description = description
        self.voice_channel_id = voice_channel_id
        self.author_name = author_name

    def make_embed(self, guild: discord.Guild, timer_minutes: int | None = None):
        participants_ids = airdrops.get(self.message_id, {}).get("participants", [])
        voice_channel = guild.get_channel(self.voice_channel_id)
        
        embed = discord.Embed(title="üéÅ AirDrop!", description=self.description, color=discord.Color(0xFFFFFF))
        embed.set_thumbnail(url=LOGO_URL)
        embed.add_field(name="Kana≈Ç g≈Çosowy:", value=f"üîä {voice_channel.mention if voice_channel else 'Nieznany kana≈Ç'}", inline=False)
        
        if participants_ids:
            lines = []
            for uid in participants_ids:
                member = guild.get_member(uid)
                lines.append(f"- {member.mention}" if member else f"- <@{uid}>")
            embed.add_field(name=f"Zapisani ({len(participants_ids)}):", value="\n".join(lines), inline=False)
        else:
            embed.add_field(name="Zapisani:", value="Brak uczestnik√≥w", inline=False)
            
        footer_text = f"Wystawione przez {self.author_name}"
        # Dynamiczny Timer w Stopce
        if timer_minutes is not None:
            if timer_minutes > 0:
                footer_text += f" | ‚è∞ Rozpoczƒôcie za: {timer_minutes} minut"
            else:
                 footer_text += f" | ‚ö†Ô∏è CZAS UP≈ÅYNƒÑ≈Å! Rozpoczƒôcie!"

        embed.set_footer(text=footer_text)
        return embed
    
    # join/leave buttons zaktualizowane o logikƒô timera
    @ui.button(label="‚úÖ Do≈ÇƒÖcz", style=discord.ButtonStyle.green)
    async def join(self, interaction: discord.Interaction, button: ui.Button):
        await interaction.response.defer() 
        participants = airdrops.get(self.message_id, {}).get("participants", [])
        
        if interaction.user.id in participants:
            await interaction.followup.send("Ju≈º jeste≈õ zapisany(a).", ephemeral=True)
            return
        
        airdrops.setdefault(self.message_id, {"participants": []})["participants"].append(interaction.user.id)
        data = airdrops.get(self.message_id, {})
        time_left = int((data.get("timer_end_time", datetime.now()) - datetime.now()).total_seconds() // 60)
        await interaction.message.edit(embed=self.make_embed(interaction.guild, time_left), view=self)
        await interaction.followup.send("‚úÖ Do≈ÇƒÖczy≈Çe≈õ(a≈õ)!", ephemeral=True)

    @ui.button(label="‚ùå Opu≈õƒá", style=discord.ButtonStyle.red)
    async def leave(self, interaction: discord.Interaction, button: ui.Button):
        await interaction.response.defer() 
        participants = airdrops.get(self.message_id, {}).get("participants", [])
        
        if interaction.user.id not in participants:
            await interaction.followup.send("Nie jeste≈õ zapisany(a).", ephemeral=True)
            return
            
        airdrops[self.message_id]["participants"].remove(interaction.user.id)
        data = airdrops.get(self.message_id, {})
        time_left = int((data.get("timer_end_time", datetime.now()) - datetime.now()).total_seconds() // 60)
        await interaction.message.edit(embed=self.make_embed(interaction.guild, time_left), view=self)
        await interaction.followup.send("‚ùå Opu≈õci≈Çe≈õ(a≈õ).", ephemeral=True)


class EventView(ui.View):
    def __init__(self, message_id: int, event_type: str, author_name: str): 
        super().__init__(timeout=None)
        self.message_id = message_id
        self.event_type = event_type
        self.author_name = author_name

    def make_embed(self, guild: discord.Guild, timer_minutes: int | None = None):
        participants_ids = events[self.event_type].get(self.message_id, {}).get("participants", [])
        data = events[self.event_type].get(self.message_id, {})
        
        title = "PING ZANCUDO" if self.event_type == "zancudo" else "PING CAYO"
        image_url = ZANCUDO_IMAGE_URL if self.event_type == "zancudo" else CAYO_IMAGE_URL
        
        voice_channel = guild.get_channel(data.get("voice_channel_id"))
        
        description_text = f"üö® **Zbi√≥rka na: {voice_channel.mention if voice_channel else 'Nieznany kana≈Ç'}**."
        
        embed = discord.Embed(title=title, description=description_text, color=discord.Color.red())
        embed.set_image(url=image_url)
        
        if participants_ids:
            lines = []
            for uid in participants_ids:
                member = guild.get_member(uid)
                lines.append(f"- {member.mention}" if member else f"- <@{uid}>")
            embed.add_field(name=f"Zapisani ({len(participants_ids)}):", value="\n".join(lines), inline=False)
        else:
            embed.add_field(name="Zapisani:", value="Brak uczestnik√≥w", inline=False)
            
        footer_text = f"Wystawione przez {self.author_name}"
        # Dynamiczny Timer w Stopce
        if timer_minutes is not None:
            if timer_minutes > 0:
                footer_text += f" | ‚è∞ Rozpoczƒôcie za: {timer_minutes} minut"
            else:
                 footer_text += f" | ‚ö†Ô∏è CZAS UP≈ÅYNƒÑ≈Å! Rozpoczƒôcie!"
                 
        embed.set_footer(text=footer_text)
        return embed

    # join/leave buttons zaktualizowane o logikƒô timera
    @ui.button(label="‚úÖ Wpisz siƒô", style=discord.ButtonStyle.green)
    async def join_button(self, interaction: discord.Interaction, button: ui.Button):
        user_id = interaction.user.id
        participants = events[self.event_type].get(self.message_id, {}).get("participants", [])
        
        if user_id not in participants:
            await interaction.response.defer() 
            events[self.event_type].setdefault(self.message_id, {"participants": []})["participants"].append(user_id)
            data = events[self.event_type].get(self.message_id, {})
            time_left = int((data.get("timer_end_time", datetime.now()) - datetime.now()).total_seconds() // 60)
            await interaction.message.edit(embed=self.make_embed(interaction.guild, time_left), view=self)
            await interaction.followup.send("Zosta≈Çe≈õ(a≈õ) zapisany(a)!", ephemeral=True)
        else:
            await interaction.response.send_message("Ju≈º jeste≈õ zapisany(a).", ephemeral=True)

    @ui.button(label="‚ùå Wypisz siƒô", style=discord.ButtonStyle.red)
    async def leave_button(self, interaction: discord.Interaction, button: ui.Button):
        user_id = interaction.user.id
        participants = events[self.event_type].get(self.message_id, {}).get("participants", [])
        
        if user_id in participants:
            await interaction.response.defer() 
            events[self.event_type][self.message_id]["participants"].remove(user_id)
            data = events[self.event_type].get(self.message_id, {})
            time_left = int((data.get("timer_end_time", datetime.now()) - datetime.now()).total_seconds() // 60)
            await interaction.message.edit(embed=self.make_embed(interaction.guild, time_left), view=self)
            await interaction.followup.send("Zosta≈Çe≈õ(a≈õ) wypisany(a).", ephemeral=True)
        else:
            await interaction.response.send_message("Nie jeste≈õ zapisany(a).", ephemeral=True)


# =====================
# <<< MODALE (FORMULARZE - Core Fix) >>>
# =====================

class CapturesModal(ui.Modal, title="Utw√≥rz Og≈Çoszenie CAPTURES"):
    channel_mention = ui.TextInput(label="Kana≈Ç tekstowy (#kana≈Ç)", placeholder="#og≈Çoszenia", required=True)
    role_mention = ui.TextInput(label="Rola do spingowania (@rola)", placeholder="@Gracze", required=True)
    image_url = ui.TextInput(label="Link do obrazka w tle (opcjonalnie)", required=False)
    timer_minutes = ui.TextInput(label="Timer (np. 5 min)", placeholder="5 min", required=True, max_length=10)

    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True)
        
        channel_id = parse_mention_id(str(self.channel_mention), "channel")
        role_id = parse_mention_id(str(self.role_mention), "role")
        timer = parse_timer_minutes(str(self.timer_minutes))
        image_url = str(self.image_url) if str(self.image_url) else None
        
        if not channel_id or not role_id or timer <= 0:
            await interaction.followup.send("‚ùå B≈ÇƒÖd parsowania danych. Upewnij siƒô, ≈ºe kana≈Ç i rola sƒÖ wzmiankami (#kana≈Ç/@rola), a timer to liczba minut (np. '5 min').", ephemeral=True)
            return
            
        channel = interaction.guild.get_channel(channel_id)
        role = interaction.guild.get_role(role_id)
        
        if not channel or not role:
            await interaction.followup.send("‚ùå Nie znaleziono kana≈Çu lub roli o podanym ID/wzmianki.", ephemeral=True)
            return

        author_name = interaction.user.display_name
        
        view = CapturesView(0, author_name)
        embed = view.make_embed(interaction.guild, timer)
        
        # POPRAWKA 1: Tre≈õƒá wiadomo≈õci to tylko ping
        content_message = f"{role.mention}" 
        
        try:
            message = await channel.send(content=content_message, embed=embed, view=view)
        except Exception as e:
            await interaction.followup.send(f"‚ùå B≈ÇƒÖd podczas wysy≈Çania wiadomo≈õci: {e}", ephemeral=True)
            return

        # Zapisanie do pamiƒôci
        end_time = datetime.now() + timedelta(minutes=timer)
        captures[message.id] = {
            "participants": [],
            "author": interaction.user.id,
            "channel_id": channel.id,
            "message": message,
            "role_id": role.id,
            "image_url": image_url,
            "timer_end_time": end_time, # NOWA ZMIENNA DLA TIMERA
            "is_active": True,
            "author_name": author_name
        }
        
        # Aktualizacja view z poprawnym ID
        await message.edit(view=CapturesView(message.id, author_name))
        
        # Uruchomienie dynamicznego timera (Core Fix)
        client.loop.create_task(update_timer_embed(
            message.id, "captures", interaction.guild, captures[message.id], CapturesView
        ))

        await interaction.followup.send(f"‚úÖ Og≈Çoszenie **CAPTURES** (Timer: {timer} min) wys≈Çano na {channel.mention}.", ephemeral=True)


class AirdropModal(ui.Modal, title="Utw√≥rz Og≈Çoszenie AirDrop"):
    channel_text = ui.TextInput(label="Kana≈Ç tekstowy (#kana≈Ç)", placeholder="#og≈Çoszenia", required=True)
    channel_voice = ui.TextInput(label="Kana≈Ç g≈Çosowy (#kana≈Ç-g≈Çosowy)", placeholder="#g≈Çosowy-zbi√≥rka", required=True)
    role_mention = ui.TextInput(label="Rola do spingowania (@rola)", placeholder="@Gracze", required=True)
    description = ui.TextInput(label="Opis (Zasady/Info)", placeholder="RPK, 30 min, 5 os√≥b", style=discord.TextStyle.long, required=True, max_length=500)
    timer_minutes = ui.TextInput(label="Timer do rozpoczƒôcia (np. 10 min)", placeholder="10 min", required=True, max_length=10)

    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True)
        
        channel_id = parse_mention_id(str(self.channel_text), "channel")
        voice_channel_id = parse_mention_id(str(self.channel_voice), "channel")
        role_id = parse_mention_id(str(self.role_mention), "role")
        timer = parse_timer_minutes(str(self.timer_minutes))
        description = str(self.description)
        
        if not channel_id or not voice_channel_id or not role_id or timer <= 0:
             await interaction.followup.send("‚ùå B≈ÇƒÖd parsowania danych. Upewnij siƒô, ≈ºe kana≈Çy i rola sƒÖ wzmiankami, a timer to liczba minut.", ephemeral=True)
             return
            
        channel = interaction.guild.get_channel(channel_id)
        voice_channel = interaction.guild.get_channel(voice_channel_id)
        role = interaction.guild.get_role(role_id)
        
        if not channel or not voice_channel or not role:
            await interaction.followup.send("‚ùå Nie znaleziono kana≈Çu/kana≈Çu g≈Çosowego lub roli o podanym ID/wzmianki.", ephemeral=True)
            return

        author_name = interaction.user.display_name
        view = AirdropView(0, description, voice_channel.id, author_name)
        embed = view.make_embed(interaction.guild, timer)
        
        content_message = f"{role.mention}"
        
        try:
            message = await channel.send(content=content_message, embed=embed, view=view)
        except Exception as e:
            await interaction.followup.send(f"‚ùå B≈ÇƒÖd podczas wysy≈Çania wiadomo≈õci: {e}", ephemeral=True)
            return

        # Zapisanie do pamiƒôci
        end_time = datetime.now() + timedelta(minutes=timer)
        airdrops[message.id] = {
            "participants": [],
            "author": interaction.user.id,
            "channel_id": channel.id,
            "voice_channel_id": voice_channel.id,
            "description": description,
            "message": message,
            "role_id": role.id,
            "timer_end_time": end_time, 
            "is_active": True,
            "author_name": author_name
        }
        
        # Aktualizacja view z poprawnym ID
        await message.edit(view=AirdropView(message.id, description, voice_channel.id, author_name))
        
        # Uruchomienie dynamicznego timera (Core Fix)
        client.loop.create_task(update_timer_embed(
            message.id, "airdrop", interaction.guild, airdrops[message.id], AirdropView
        ))

        await interaction.followup.send(f"‚úÖ Og≈Çoszenie **AIRDROP** (Timer: {timer} min) wys≈Çano na {channel.mention}.", ephemeral=True)


class EventModal(ui.Modal, title="Utw√≥rz Ping Eventu (Zancudo/Cayo)"):
    def __init__(self, event_type: Literal["zancudo", "cayo"]):
        super().__init__(title=f"Utw√≥rz Ping {event_type.capitalize()}")
        self.event_type = event_type

        self.role_mention = ui.TextInput(label="Rola do spingowania (@rola)", placeholder="@Gracze", required=True)
        self.channel_voice = ui.TextInput(label="Kana≈Ç g≈Çosowy (#kana≈Ç-g≈Çosowy)", placeholder="#g≈Çosowy-zbi√≥rka", required=True)
        self.timer_minutes = ui.TextInput(label="Timer (np. 5 min)", placeholder="5 min", required=True, max_length=10)
        
        self.add_item(self.role_mention)
        self.add_item(self.channel_voice)
        self.add_item(self.timer_minutes)

    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True)
        
        voice_channel_id = parse_mention_id(str(self.channel_voice), "channel")
        role_id = parse_mention_id(str(self.role_mention), "role")
        timer = parse_timer_minutes(str(self.timer_minutes))
        
        if not voice_channel_id or not role_id or timer <= 0:
             await interaction.followup.send("‚ùå B≈ÇƒÖd parsowania danych. Upewnij siƒô, ≈ºe kana≈Ç i rola sƒÖ wzmiankami, a timer to liczba minut.", ephemeral=True)
             return

        voice_channel = interaction.guild.get_channel(voice_channel_id)
        role = interaction.guild.get_role(role_id)

        if not voice_channel or not role:
            await interaction.followup.send("‚ùå Nie znaleziono kana≈Çu g≈Çosowego lub roli o podanym ID/wzmianki.", ephemeral=True)
            return

        author_name = interaction.user.display_name
        view = EventView(0, self.event_type, author_name)
        embed = view.make_embed(interaction.guild, timer)
        
        content_message = f"{role.mention}"
        
        try:
            message = await interaction.channel.send(content=content_message, embed=embed, view=view)
        except Exception as e:
            await interaction.followup.send(f"‚ùå B≈ÇƒÖd podczas wysy≈Çania wiadomo≈õci: {e}", ephemeral=True)
            return

        # Zapisanie do pamiƒôci
        end_time = datetime.now() + timedelta(minutes=timer)
        events[self.event_type][message.id] = {
            "participants": [],
            "author": interaction.user.id,
            "channel_id": interaction.channel.id,
            "voice_channel_id": voice_channel.id,
            "message": message,
            "role_id": role.id,
            "timer_end_time": end_time, 
            "is_active": True,
            "author_name": author_name
        }
        
        # Aktualizacja view z poprawnym ID
        await message.edit(view=EventView(message.id, self.event_type, author_name))
        
        # Uruchomienie dynamicznego timera (Core Fix)
        client.loop.create_task(update_timer_embed(
            message.id, self.event_type, interaction.guild, events[self.event_type][message.id], EventView
        ))

        await interaction.followup.send(f"‚úÖ Og≈Çoszenie **{self.event_type.upper()}** (Timer: {timer} min) wys≈Çano na {interaction.channel.mention}.", ephemeral=True)

# =====================
# <<< PANEL ZARZƒÑDZANIA (ManagementPanelView) >>>
# =====================
class ManagementPanelView(ui.View):
    def __init__(self, admin_id: int):
        super().__init__(timeout=180)
        self.admin_id = admin_id

    @ui.button(label="üìù Utw√≥rz Captures", style=discord.ButtonStyle.green, row=0)
    async def create_capt_button(self, interaction: discord.Interaction, button: ui.Button):
        await interaction.response.send_modal(CapturesModal())
        
    @ui.button(label="üéÅ Utw√≥rz AirDrop", style=discord.ButtonStyle.blurple, row=0)
    async def create_airdrop_button(self, interaction: discord.Interaction, button: ui.Button):
        await interaction.response.send_modal(AirdropModal())

    @ui.button(label="üöÅ Ping Zancudo", style=discord.ButtonStyle.red, row=1)
    async def ping_zancudo_button(self, interaction: discord.Interaction, button: ui.Button):
        await interaction.response.send_modal(EventModal("zancudo"))
        
    @ui.button(label="üèùÔ∏è Ping Cayo", style=discord.ButtonStyle.red, row=1)
    async def ping_cayo_button(self, interaction: discord.Interaction, button: ui.Button):
        await interaction.response.send_modal(EventModal("cayo"))
        
    @ui.button(label="üë• Utw√≥rz Squad", style=discord.ButtonStyle.blurple, row=2)
    async def create_squad_button(self, interaction: discord.Interaction, button: ui.Button):
        await interaction.response.send_message(
            "U≈ºyj komendy **/create-squad @rola 'Tytu≈Ç'**, aby utworzyƒá og≈Çoszenie o sk≈Çadzie.", 
            ephemeral=True
        )
        
    @ui.button(label="‚ûï Wpisz gracza na zapis", style=discord.ButtonStyle.green, row=3)
    async def add_enroll_button(self, interaction: discord.Interaction, button: ui.Button):
        await interaction.response.send_message(
            "U≈ºyj komendy **/wpisz-na-capt @u≈ºytkownik**, aby dodaƒá gracza do aktywnego zapisu. Po jej u≈ºyciu pojawi siƒô menu wyboru zapisu.",
            ephemeral=True
        )
        
    @ui.button(label="‚ûñ Wypisz gracza z zapisu", style=discord.ButtonStyle.red, row=3)
    async def remove_enroll_button(self, interaction: discord.Interaction, button: ui.Button):
        await interaction.response.send_message(
            "U≈ºyj komendy **/wypisz-z-capt @u≈ºytkownik**, aby usunƒÖƒá gracza z aktywnego zapisu. Po jej u≈ºyciu pojawi siƒô menu wyboru zapisu.",
            ephemeral=True
        )

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        if interaction.user.id in ADMIN_ROLES:
            return True
        else:
            await interaction.response.send_message("‚ùå Tylko administrator, kt√≥ry otworzy≈Ç panel, mo≈ºe z niego korzystaƒá.", ephemeral=True)
            return False
            
# =====================
# <<< ZARZƒÑDZANIE ZAPISAMI (Admin Fix) >>>
# =====================

def get_all_active_enrollments():
    """Zbiera wszystkie aktywne zapisy (z w≈ÇƒÖczonym is_active)."""
    all_enrollments = []
    for msg_id, data in captures.items():
        if data.get("is_active", True): all_enrollments.append(("Captures", msg_id, data))
    for msg_id, data in airdrops.items():
        if data.get("is_active", True): all_enrollments.append(("AirDrop", msg_id, data))
    for etype, msgs in events.items():
        for msg_id, data in msgs.items():
             if data.get("is_active", True): all_enrollments.append((etype.capitalize(), msg_id, data))
    return all_enrollments

class EnrollmentSelectMenu(ui.Select):
    """Menu wyboru aktywnego zapisu dla komend admina."""
    def __init__(self, action: str):
        self.action = action 
        enrollments = get_all_active_enrollments()
        options = []
        for name, msg_id, data in enrollments:
            count = len(data.get("participants", []))
            # Wy≈õwietlamy typ zapisu i ID dla administratora
            options.append(
                discord.SelectOption(
                    label=f"{name} (ID: {msg_id}) - {count} os.", 
                    value=f"{name.lower()}-{msg_id}" # np. captures-123456789
                )
            )
        super().__init__(
            placeholder=f"Wybierz zapis:",
            max_values=1,
            min_values=1,
            options=options
        )
        
    async def callback(self, interaction: discord.Interaction):
        # Callback jest obs≈Çugiwany przez Confirm button w Add/RemoveEnrollmentView
        pass 

# Reszta logiki Squads i Pick (bez timera)

# =====================
# <<< WIDOKI DLA KOMEND ADMINA (/wpisz-na-capt, /wypisz-z-capt) >>>
# =====================
# Wypisz z capt
class RemoveEnrollmentView(ui.View):
    def __init__(self, member_to_remove: discord.Member):
        super().__init__(timeout=180)
        self.member_to_remove = member_to_remove
        self.add_item(EnrollmentSelectMenu("remove"))

    @ui.button(label="Potwierd≈∫ usuniƒôcie", style=discord.ButtonStyle.red)
    async def confirm_remove(self, interaction: discord.Interaction, button: ui.Button):
        await interaction.response.defer()
        
        select_menu = next((item for item in self.children if isinstance(item, ui.Select)), None)
        if not select_menu or not select_menu.values:
            await interaction.followup.send("‚ö†Ô∏è Najpierw wybierz zapis z listy!", ephemeral=True)
            return

        type_str, msg_id_str = select_menu.values[0].split('-')
        msg_id = int(msg_id_str)
        user_id = self.member_to_remove.id
        
        data_dict = None
        if type_str == "captures": data_dict = captures.get(msg_id)
        elif type_str == "airdrop": data_dict = airdrops.get(msg_id)
        elif type_str in events: data_dict = events[type_str].get(msg_id)

        if not data_dict:
            await interaction.followup.edit_message(content="‚ùå B≈ÇƒÖd: Nie znaleziono aktywnego zapisu o tym ID.", view=None)
            return

        participants = data_dict.get("participants", [])
        if user_id not in participants:
            await interaction.followup.edit_message(content=f"‚ö†Ô∏è **{self.member_to_remove.display_name}** nie jest zapisany(a) na ten **{type_str.capitalize()}**.", view=None)
            return

        participants.remove(user_id)
        
        # Aktualizacja embeda z nowƒÖ listƒÖ
        message = data_dict.get("message")
        if message and hasattr(message, 'edit'):
            time_left = int((data_dict.get("timer_end_time", datetime.now()) - datetime.now()).total_seconds() // 60)
            if type_str == "airdrop":
                view_obj = AirdropView(msg_id, data_dict["description"], data_dict["voice_channel_id"], data_dict["author_name"])
                await message.edit(embed=view_obj.make_embed(message.guild, time_left), view=view_obj)
            elif type_str == "captures":
                 view_obj = CapturesView(msg_id, data_dict["author_name"])
                 await message.edit(embed=view_obj.make_embed(message.guild, time_left), view=view_obj)

        await interaction.followup.edit_message(
            content=f"‚úÖ Pomy≈õlnie wypisano **{self.member_to_remove.display_name}** z **{type_str.capitalize()}** (ID: `{msg_id}`).", 
            view=None
        )

# Wpisz na capt
class AddEnrollmentView(ui.View):
    def __init__(self, member_to_add: discord.Member):
        super().__init__(timeout=180)
        self.member_to_add = member_to_add
        self.add_item(EnrollmentSelectMenu("add"))

    @ui.button(label="Potwierd≈∫ dodanie", style=discord.ButtonStyle.green)
    async def confirm_add(self, interaction: discord.Interaction, button: ui.Button):
        await interaction.response.defer()
        
        select_menu = next((item for item in self.children if isinstance(item, ui.Select)), None)
        if not select_menu or not select_menu.values:
            await interaction.followup.send("‚ö†Ô∏è Najpierw wybierz zapis z listy!", ephemeral=True)
            return

        type_str, msg_id_str = select_menu.values[0].split('-')
        msg_id = int(msg_id_str)
        user_id = self.member_to_add.id
        
        data_dict = None
        if type_str == "captures": data_dict = captures.get(msg_id)
        elif type_str == "airdrop": data_dict = airdrops.get(msg_id)
        elif type_str in events: data_dict = events[type_str].get(msg_id)

        if not data_dict:
            await interaction.followup.edit_message(content="‚ùå B≈ÇƒÖd: Nie znaleziono aktywnego zapisu o tym ID.", view=None)
            return

        participants = data_dict.get("participants", [])
        if user_id in participants:
            await interaction.followup.edit_message(content=f"‚ö†Ô∏è **{self.member_to_add.display_name}** jest ju≈º zapisany(a) na ten **{type_str.capitalize()}**.", view=None)
            return

        participants.append(user_id)
        
        # Aktualizacja embeda z nowƒÖ listƒÖ
        message = data_dict.get("message")
        if message and hasattr(message, 'edit'):
            time_left = int((data_dict.get("timer_end_time", datetime.now()) - datetime.now()).total_seconds() // 60)
            if type_str == "airdrop":
                view_obj = AirdropView(msg_id, data_dict["description"], data_dict["voice_channel_id"], data_dict["author_name"])
                await message.edit(embed=view_obj.make_embed(message.guild, time_left), view=view_obj)
            elif type_str == "captures":
                 view_obj = CapturesView(msg_id, data_dict["author_name"])
                 await message.edit(embed=view_obj.make_embed(message.guild, time_left), view=view_obj)

        await interaction.followup.edit_message(
            content=f"‚úÖ Pomy≈õlnie wpisano **{self.member_to_add.display_name}** na **{type_str.capitalize()}** (ID: `{msg_id}`).", 
            view=None
        )

# =====================
# <<< KOMENDY (Slash Commands) >>>
# =====================

@tree.command(name="panel", description="Wy≈õwietla panel do tworzenia og≈Çosze≈Ñ (tylko Admini).")
async def panel_command(interaction: discord.Interaction):
    await interaction.response.defer(ephemeral=True)
    if interaction.user.id not in ADMIN_ROLES:
        await interaction.followup.send("‚õî Brak uprawnie≈Ñ do u≈ºycia tej komendy!", ephemeral=True)
        return
    embed = discord.Embed(
        title="üõ†Ô∏è Panel ZarzƒÖdzania Og≈Çoszeniami", 
        description="Wybierz opcjƒô, aby otworzyƒá **formularz** (Modal).",
        color=discord.Color.dark_green()
    )
    await interaction.followup.send(
        embed=embed, 
        view=ManagementPanelView(interaction.user.id), 
        ephemeral=True
    )

@tree.command(name="wpisz-na-capt", description="Wpisuje u≈ºytkownika na dowolny aktywny zapis (Captures, AirDrop, Event).")
@app_commands.describe(cz≈Çonek="U≈ºytkownik, kt√≥rego chcesz wpisaƒá.")
async def add_to_enrollment(interaction: discord.Interaction, cz≈Çonek: discord.Member):
    await interaction.response.defer(ephemeral=True)
    
    if interaction.user.id not in ADMIN_ROLES:
        await interaction.followup.send("‚õî Brak uprawnie≈Ñ do u≈ºycia tej komendy!", ephemeral=True)
        return
        
    enrollments = get_all_active_enrollments()
    if not enrollments:
        await interaction.followup.send("‚ö†Ô∏è Brak aktywnych zapis√≥w, na kt√≥re mo≈ºna wpisaƒá u≈ºytkownika.", ephemeral=True)
        return
        
    await interaction.followup.send(
        f"Wybierz zapis, na kt√≥ry wpisaƒá **{cz≈Çonek.display_name}**:", 
        view=AddEnrollmentView(cz≈Çonek), 
        ephemeral=True
    )

@tree.command(name="wypisz-z-capt", description="Wypisuje u≈ºytkownika z dowolnego aktywnego zapisu (Captures, AirDrop, Event).")
@app_commands.describe(cz≈Çonek="U≈ºytkownik, kt√≥rego chcesz wypisaƒá.")
async def remove_from_enrollment(interaction: discord.Interaction, cz≈Çonek: discord.Member):
    await interaction.response.defer(ephemeral=True)
    
    if interaction.user.id not in ADMIN_ROLES:
        await interaction.followup.send("‚õî Brak uprawnie≈Ñ do u≈ºycia tej komendy!", ephemeral=True)
        return
        
    enrollments = get_all_active_enrollments()
    if not enrollments:
        await interaction.followup.send("‚ö†Ô∏è Brak aktywnych zapis√≥w, z kt√≥rych mo≈ºna wypisaƒá u≈ºytkownika.", ephemeral=True)
        return
        
    await interaction.followup.send(
        f"Wybierz zapis, z kt√≥rego usunƒÖƒá **{cz≈Çonek.display_name}**:", 
        view=RemoveEnrollmentView(cz≈Çonek), 
        ephemeral=True
    )
    
# --- Event: On Ready i Uruchomienie Bota ---
@client.event
async def on_ready():
    # ... Logika przywracania widok√≥w ...
    await tree.sync()
    print(f"‚úÖ Zalogowano jako {client.user}")

def run_discord_bot():
    try:
        # Zapisz SquadView, aby uniknƒÖƒá b≈Çƒôd√≥w
        class SquadView(ui.View):
             def __init__(self, message_id: int, role_id: int):
                 super().__init__(timeout=None)
             @ui.button(label="ZarzƒÖdzaj sk≈Çadem (ADMIN)", style=discord.ButtonStyle.blurple)
             async def manage_squad_button(self, interaction: discord.Interaction, button: ui.Button):
                 await interaction.response.send_message("Logika Squad jest tymczasowo uproszczona.", ephemeral=True)

        for msg_id, data in captures.items():
            if data.get("is_active"): client.add_view(CapturesView(msg_id, data["author_name"]))
        for msg_id, data in airdrops.items():
            if data.get("is_active"): client.add_view(AirdropView(msg_id, data["description"], data["voice_channel_id"], data["author_name"]))
        for msg_id, data in events["zancudo"].items():
            if data.get("is_active"): client.add_view(EventView(msg_id, "zancudo", data["author_name"]))
        for msg_id, data in events["cayo"].items():
            if data.get("is_active"): client.add_view(EventView(msg_id, "cayo", data["author_name"]))
        for msg_id, data in squads.items():
            client.add_view(SquadView(msg_id, data["role_id"]))
            
        client.run(token)
    except Exception as e:
        print(f"B≈ÇƒÖd uruchomienia bota: {e}")

threading.Thread(target=run_discord_bot).start()

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
